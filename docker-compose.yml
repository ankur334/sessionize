services:
  # Apache Kafka with KRaft mode (no ZooKeeper needed)
  # Core component for sessionization pipeline
  broker:
    image: apache/kafka:latest
    hostname: broker
    container_name: broker
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker:29093
      KAFKA_LISTENERS: PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
      # Optimized for sessionization workloads
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_LOG_RETENTION_HOURS: 24
      KAFKA_LOG_SEGMENT_BYTES: 104857600  # 100MB
    volumes:
      - kafka_data:/tmp/kraft-combined-logs
    networks:
      - sessionize-network
    healthcheck:
      test: ["CMD-SHELL", "/opt/kafka/bin/kafka-broker-api-versions.sh --bootstrap-server localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka UI for monitoring and debugging (helpful for development)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: sessionize-kafka-ui
    depends_on:
      broker:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: sessionize-local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:29092
      DYNAMIC_CONFIG_ENABLED: 'true'
    networks:
      - sessionize-network

  # Schema Registry (OPTIONAL - uncomment if you need Avro schemas)
  # schema-registry:
  #   image: confluentinc/cp-schema-registry:7.7.1
  #   hostname: schema-registry
  #   container_name: sessionize-schema-registry
  #   depends_on:
  #     broker:
  #       condition: service_healthy
  #   ports:
  #     - "8081:8081"
  #   environment:
  #     SCHEMA_REGISTRY_HOST_NAME: schema-registry
  #     SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
  #     SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
  #   networks:
  #     - sessionize-network
  #   profiles:
  #     - "extended"

  # Kafka Connect (OPTIONAL - uncomment if you need connector-based integration)
  # kafka-connect:
  #   image: confluentinc/cp-kafka-connect:7.7.1
  #   hostname: kafka-connect
  #   container_name: sessionize-kafka-connect
  #   depends_on:
  #     broker:
  #       condition: service_healthy
  #   ports:
  #     - "8083:8083"
  #   environment:
  #     CONNECT_BOOTSTRAP_SERVERS: 'broker:29092'
  #     CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
  #     CONNECT_GROUP_ID: sessionize-connect-cluster
  #     CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
  #     CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
  #     CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
  #     CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
  #     CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
  #     CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
  #     CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
  #     CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
  #     CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: 'false'
  #     CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
  #   volumes:
  #     - kafka_connect_data:/tmp/kafka-logs
  #   networks:
  #     - sessionize-network
  #   profiles:
  #     - "extended"

volumes:
  kafka_data:
  kafka_connect_data:

networks:
  sessionize-network:
    driver: bridge